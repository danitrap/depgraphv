; CPack install script designed for a nmake build

;--------------------------------
; You must define these values

!define VERSION "@CPACK_PACKAGE_VERSION@"
!define PATCH  "@CPACK_PACKAGE_VERSION_PATCH@"
!define INST_DIR "@CPACK_TEMPORARY_DIRECTORY@"
!define PROJECT_NAME "@CPACK_NSIS_PROJECT_NAME@"
!define BIN_PATH "@CPACK_NSIS_BIN_PATH@"

;--------------------------------
;Variables

Var MUI_TEMP
Var STARTMENU_FOLDER
Var SV_ALLUSERS
Var START_MENU
Var INSTALL_DESKTOP
Var IS_DEFAULT_INSTALLDIR
;--------------------------------
;Include Modern UI

!include "MUI.nsh"

!addincludedir "@CPACK_NSIS_INCLUDE_PATH@"
!include "MUI_EXTRAPAGES.nsh"

;Default installation folder
InstallDir "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@"

;--------------------------------
;General

;Name and file
Name "@CPACK_NSIS_PACKAGE_NAME@"
OutFile "@CPACK_TOPLEVEL_DIRECTORY@/@CPACK_OUTPUT_FILE_NAME@"

;Set compression
SetCompressor @CPACK_NSIS_COMPRESSOR@

;Require administrator access
RequestExecutionLevel admin

@CPACK_NSIS_DEFINES@

!include Sections.nsh

;--- Component support macros: ---
; The code for the add/remove functionality is from:
;   http://nsis.sourceforge.net/Add/Remove_Functionality
; It has been modified slightly and extended to provide
; inter-component dependencies.
Var AR_SecFlags
Var AR_RegFlags
@CPACK_NSIS_SECTION_SELECTED_VARS@

; Loads the "selected" flag for the section named SecName into the
; variable VarName.
!macro LoadSectionSelectedIntoVar SecName VarName
	SectionGetFlags ${${SecName}} $${VarName}
	IntOp $${VarName} $${VarName} & ${SF_SELECTED}  ;Turn off all other bits
!macroend

; Loads the value of a variable... can we get around this?
!macro LoadVar VarName
	IntOp $R0 0 + $${VarName}
!macroend

; Sets the value of a variable
!macro StoreVar VarName IntValue
	IntOp $${VarName} 0 + ${IntValue}
!macroend

!macro InitSection SecName
	;  This macro reads component installed flag from the registry and
	;changes checked state of the section on the components page.
	;Input: section index constant name specified in Section command.

	ClearErrors
	;Reading component status from registry
	ReadRegDWORD $AR_RegFlags HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@\Components\${SecName}" "Installed"
	IfErrors "default_${SecName}"
	;Status will stay default if registry value not found
	;(component was never installed)
	IntOp $AR_RegFlags $AR_RegFlags & ${SF_SELECTED} ;Turn off all other bits
	SectionGetFlags ${${SecName}} $AR_SecFlags  ;Reading default section flags
	IntOp $AR_SecFlags $AR_SecFlags & 0xFFFE  ;Turn lowest (enabled) bit off
	IntOp $AR_SecFlags $AR_RegFlags | $AR_SecFlags      ;Change lowest bit

	; Note whether this component was installed before
	!insertmacro StoreVar ${SecName}_was_installed $AR_RegFlags
	IntOp $R0 $AR_RegFlags & $AR_RegFlags

	;Writing modified flags
	SectionSetFlags ${${SecName}} $AR_SecFlags

	"default_${SecName}:"
	!insertmacro LoadSectionSelectedIntoVar ${SecName} ${SecName}_selected
!macroend

!macro FinishSection SecName
	;  This macro reads section flag set by user and removes the section
	;if it is not selected.
	;Then it writes component installed flag to registry
	;Input: section index constant name specified in Section command.

	SectionGetFlags ${${SecName}} $AR_SecFlags  ;Reading section flags
	;Checking lowest bit:
	IntOp $AR_SecFlags $AR_SecFlags & ${SF_SELECTED}
	IntCmp $AR_SecFlags 1 "leave_${SecName}"
	;Section is not selected:
	;Calling Section uninstall macro and writing zero installed flag
	!insertmacro "Remove_${${SecName}}"
	WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@\Components\${SecName}" \
	"Installed" 0
	Goto "exit_${SecName}"

	"leave_${SecName}:"
	;Section is selected:
	WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@\Components\${SecName}" \
	"Installed" 1

	"exit_${SecName}:"
!macroend

!macro RemoveSection_CPack SecName
	;  This macro is used to call section's Remove_... macro
	;from the uninstaller.
	;Input: section index constant name specified in Section command.

	!insertmacro "Remove_${${SecName}}"
!macroend

; Determine whether the selection of SecName changed
!macro MaybeSelectionChanged SecName
	!insertmacro LoadVar ${SecName}_selected
	SectionGetFlags ${${SecName}} $R1
	IntOp $R1 $R1 & ${SF_SELECTED} ;Turn off all other bits

	; See if the status has changed:
	IntCmp $R0 $R1 "${SecName}_unchanged"
	!insertmacro LoadSectionSelectedIntoVar ${SecName} ${SecName}_selected

	IntCmp $R1 ${SF_SELECTED} "${SecName}_was_selected"
	!insertmacro "Deselect_required_by_${SecName}"
	goto "${SecName}_unchanged"

	"${SecName}_was_selected:"
	!insertmacro "Select_${SecName}_depends"

	"${SecName}_unchanged:"
!macroend
;--- End of Add/Remove macros ---

;--------------------------------
;Interface Settings

!define MUI_HEADERIMAGE
!define MUI_ABORTWARNING

;--------------------------------
; path functions

!verbose 3
!include "WinMessages.NSH"
!verbose 4
;----------------------------------------------------

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Uninstall sutff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

###########################################
#            Utility Functions            #
###########################################

Function ConditionalAddToRegisty
	Pop $0
	Pop $1
	StrCmp "$0" "" ConditionalAddToRegisty_EmptyString
	WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@" \
	"$1" "$0"
	;MessageBox MB_OK "Set Registry: '$1' to '$0'"
	DetailPrint "Set install registry entry: '$1' to '$0'"
	ConditionalAddToRegisty_EmptyString:
FunctionEnd

;--------------------------------
; Installation types
@CPACK_NSIS_INSTALLATION_TYPES@

;--------------------------------
; Component sections
@CPACK_NSIS_COMPONENT_SECTIONS@

;--------------------------------
; Define some macro setting for the gui
@CPACK_NSIS_INSTALLER_MUI_ICON_CODE@
@CPACK_NSIS_INSTALLER_ICON_CODE@
@CPACK_NSIS_INSTALLER_MUI_COMPONENTS_DESC@
@CPACK_NSIS_INSTALLER_MUI_FINISHPAGE_RUN_CODE@

;--------------------------------
;Pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_README "@CPACK_RESOURCE_FILE_README@"
!insertmacro MUI_PAGE_LICENSE "@CPACK_RESOURCE_FILE_LICENSE@"
Page custom InstallOptionsPage
!insertmacro MUI_PAGE_DIRECTORY

;Start Menu Folder Page Configuration
!define MUI_STARTMENUPAGE_REGISTRY_ROOT "SHCTX"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "Start Menu Folder"
!insertmacro MUI_PAGE_STARTMENU Application $STARTMENU_FOLDER

@CPACK_NSIS_PAGE_COMPONENTS@

!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_UNPAGE_FINISH

;--------------------------------
;Languages

!insertmacro MUI_LANGUAGE "English"
${ReadmeLanguage} "${LANG_ENGLISH}" \
	  "Read Me" \
	  "Please review the following information." \
	  "About $(^name):" \
	  "$\n  Click on scrollbar arrows or press Page Down to review the entire text."

!insertmacro MUI_LANGUAGE "Italian"
${ReadmeLanguage} "${LANG_ITALIAN}" \
	  "Leggimi" \
	  "Per favore, leggi le seguenti informazioni." \
	  "Riguardo $(^name):" \
	  "$\n  Usa la barra di scorrimento o premi Page Down per scorrere il testo."


;--------------------------------
;Reserve Files

;These files should be inserted before other files in the data block
;Keep these lines before any File command
;Only for solid compression (by default, solid compression is enabled for BZIP2 and LZMA)

ReserveFile "NSIS.InstallOptions.ini"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

;--------------------------------
;Installer Sections

Section "-Core installation"
	;Use the entire tree produced by the INSTALL target.  Keep the
	;list of directories here in sync with the RMDir commands below.
	SetOutPath "$INSTDIR"
	@CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS@
	@CPACK_NSIS_FULL_INSTALL@

	;Store installation folder
	WriteRegStr SHCTX "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@" "" $INSTDIR

	;Create uninstaller
	WriteUninstaller "$INSTDIR\Uninstall.exe"
	Push "DisplayName"
	Push "@CPACK_NSIS_DISPLAY_NAME@"
	Call ConditionalAddToRegisty
	Push "DisplayVersion"
	Push "@CPACK_PACKAGE_VERSION@"
	Call ConditionalAddToRegisty
	Push "Publisher"
	Push "@CPACK_PACKAGE_VENDOR@"
	Call ConditionalAddToRegisty
	Push "UninstallString"
	Push "$INSTDIR\Uninstall.exe"
	Call ConditionalAddToRegisty
	Push "NoRepair"
	Push "1"
	Call ConditionalAddToRegisty

	!ifdef CPACK_NSIS_ADD_REMOVE
		;Create add/remove functionality
		Push "ModifyPath"
		Push "$INSTDIR\AddRemove.exe"
		Call ConditionalAddToRegisty
	!else
		Push "NoModify"
		Push "1"
		Call ConditionalAddToRegisty
	!endif

	; Optional registration
	Push "DisplayIcon"
	Push "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
	Call ConditionalAddToRegisty
	Push "HelpLink"
	Push "@CPACK_NSIS_HELP_LINK@"
	Call ConditionalAddToRegisty
	Push "URLInfoAbout"
	Push "@CPACK_NSIS_URL_INFO_ABOUT@"
	Call ConditionalAddToRegisty
	Push "Contact"
	Push "@CPACK_NSIS_CONTACT@"
	Call ConditionalAddToRegisty
	!insertmacro MUI_INSTALLOPTIONS_READ $INSTALL_DESKTOP "NSIS.InstallOptions.ini" "Field 1" "State"
	!insertmacro MUI_STARTMENU_WRITE_BEGIN Application
	;{
		;Create folder
		CreateDirectory "$SMPROGRAMS\$STARTMENU_FOLDER"
		
		;Create project website link
		WriteIniStr "$SMPROGRAMS\$STARTMENU_FOLDER\@CPACK_NSIS_URL_LINK_NAME@.url" "InternetShortcut" "URL" "@CPACK_NSIS_URL_INFO_ABOUT@"
		
		;Create shortcuts
		CreateShortCut "$SMPROGRAMS\$STARTMENU_FOLDER\${PROJECT_NAME}.lnk" "$INSTDIR\${BIN_PATH}\${PROJECT_NAME}.exe"
		CreateShortCut "$SMPROGRAMS\$STARTMENU_FOLDER\Uninstall.lnk" "$INSTDIR\Uninstall.exe"
			
		${If} $INSTALL_DESKTOP == 1
			CreateShortCut "$DESKTOP\${PROJECT_NAME}.lnk" "$INSTDIR\${BIN_PATH}\${PROJECT_NAME}.exe"
		${EndIf}

		@CPACK_NSIS_CREATE_ICONS@
		@CPACK_NSIS_CREATE_ICONS_EXTRA@
		
		; Write special uninstall registry entries
		Push "StartMenu"
		Push "$STARTMENU_FOLDER"
		Call ConditionalAddToRegisty
		Push "InstallToDesktop"
		Push "$INSTALL_DESKTOP"
		Call ConditionalAddToRegisty
	;}
	!insertmacro MUI_STARTMENU_WRITE_END
	
	;Donwload, if required, Microsoft Visual C++ redistributable package
	StrCmp "@CPACK_NSIS_MSVC_REDIST@" "ON" 0 noMSVC_Redist
	MessageBox MB_OK "@CPACK_NSIS_MSVC_REDIST_MSG@"
	StrCpy $2 "$INSTDIR\vcredist.exe"
	NSISdl::download "@CPACK_NSIS_MSVC_REDIST_LINK@" $2
	Pop $R0 ; Get the return value
	StrCmp $R0 "success" +3
		MessageBox MB_OK "Download failed: $R0"
		Quit
	success:
		ExecWait '"$2" /q:a'
		Delete $2
		
	noMSVC_Redist:
		
	@CPACK_NSIS_EXTRA_INSTALL_COMMANDS@

SectionEnd

;--------------------------------
; Create custom pages
Function InstallOptionsPage
	!insertmacro MUI_HEADER_TEXT "Install Options" "Choose options for installing @CPACK_NSIS_PACKAGE_NAME@"
	!insertmacro MUI_INSTALLOPTIONS_DISPLAY "NSIS.InstallOptions.ini"
FunctionEnd

;--------------------------------
; determine admin versus local install
Function un.onInit

	ClearErrors
	UserInfo::GetName
	IfErrors noLM
	Pop $0
	UserInfo::GetAccountType
	Pop $1
	StrCmp $1 "Admin" 0 +3
	SetShellVarContext all
	;MessageBox MB_OK 'User "$0" is in the Admin group'
	Goto done
	StrCmp $1 "Power" 0 +3
	SetShellVarContext all
	;MessageBox MB_OK 'User "$0" is in the Power Users group'
	Goto done

	noLM:
		;Get installation folder from registry if available

	done:

FunctionEnd

;--- Add/Remove callback functions: ---
!macro SectionList MacroName
	;This macro used to perform operation on multiple sections.
	;List all of your components in following manner here.
	@CPACK_NSIS_COMPONENT_SECTION_LIST@
!macroend

Section -FinishComponents
	;Removes unselected components and writes component status to registry
	!insertmacro SectionList "FinishSection"

	!ifdef CPACK_NSIS_ADD_REMOVE
		; Get the name of the installer executable
		System::Call 'kernel32::GetModuleFileNameA(i 0, t .R0, i 1024) i r1'
		StrCpy $R3 $R0

		; Strip off the last 13 characters, to see if we have AddRemove.exe
		StrLen $R1 $R0
		IntOp $R1 $R0 - 13
		StrCpy $R2 $R0 13 $R1
		StrCmp $R2 "AddRemove.exe" addremove_installed

		; We're not running AddRemove.exe, so install it
		CopyFiles $R3 $INSTDIR\AddRemove.exe

		addremove_installed:
	!endif
SectionEnd
;--- End of Add/Remove callback functions ---

;--------------------------------
; Component dependencies
Function .onSelChange
	!insertmacro SectionList MaybeSelectionChanged
FunctionEnd

;--------------------------------
;Uninstaller Section

Section "Uninstall"
	ReadRegStr $START_MENU SHCTX \
	"Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@" "StartMenu"
	;MessageBox MB_OK "Start menu is in: $START_MENU"
	ReadRegStr $INSTALL_DESKTOP SHCTX \
	"Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@" "InstallToDesktop"
	;MessageBox MB_OK "Install to desktop: $INSTALL_DESKTOP "

	@CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS@

	;Remove files we installed.
	;Keep the list of directories here in sync with the File commands above.
	@CPACK_NSIS_DELETE_FILES@
	@CPACK_NSIS_DELETE_DIRECTORIES@

	!ifdef CPACK_NSIS_ADD_REMOVE
		;Remove the add/remove program
		Delete "$INSTDIR\AddRemove.exe"
	!endif

	;Remove the uninstaller itself.
	Delete "$INSTDIR\Uninstall.exe"
	DeleteRegKey SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"

	;Remove the installation directory if it is empty.
	RMDir "$INSTDIR"

	; Remove the registry entries.
	DeleteRegKey SHCTX "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"

	; Removes all optional components
	!insertmacro SectionList "RemoveSection_CPack"

	!insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP

	Delete "$SMPROGRAMS\$MUI_TEMP\Uninstall.lnk"
	Delete "$SMPROGRAMS\$MUI_TEMP\${PROJECT_NAME}.lnk"
	Delete "$SMPROGRAMS\$MUI_TEMP\@CPACK_NSIS_URL_LINK_NAME@.url"
		
	${If} $INSTALL_DESKTOP == 1
		Delete "$DESKTOP\${PROJECT_NAME}.lnk"
	${EndIf}
	
	@CPACK_NSIS_DELETE_ICONS@
	@CPACK_NSIS_DELETE_ICONS_EXTRA@

	;Delete empty start menu parent diretories
	StrCpy $MUI_TEMP "$SMPROGRAMS\$MUI_TEMP"

	startMenuDeleteLoop:
		ClearErrors
		RMDir $MUI_TEMP
		GetFullPathName $MUI_TEMP "$MUI_TEMP\.."

		IfErrors startMenuDeleteLoopDone

		StrCmp "$MUI_TEMP" "$SMPROGRAMS" startMenuDeleteLoopDone startMenuDeleteLoop
	
	startMenuDeleteLoopDone:

		; If the user changed the shortcut, then untinstall may not work. This should
		; try to fix it.
		StrCpy $MUI_TEMP "$START_MENU"
		Delete "$SMPROGRAMS\$MUI_TEMP\Uninstall.lnk"
		@CPACK_NSIS_DELETE_ICONS_EXTRA@

		;Delete empty start menu parent diretories
		StrCpy $MUI_TEMP "$SMPROGRAMS\$MUI_TEMP"

	secondStartMenuDeleteLoop:
		ClearErrors
		RMDir $MUI_TEMP
		GetFullPathName $MUI_TEMP "$MUI_TEMP\.."

		IfErrors secondStartMenuDeleteLoopDone

		StrCmp "$MUI_TEMP" "$SMPROGRAMS" secondStartMenuDeleteLoopDone secondStartMenuDeleteLoop

	secondStartMenuDeleteLoopDone:
		DeleteRegKey /ifempty SHCTX "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"
		Push $INSTDIR\bin
SectionEnd

;--------------------------------
; determine admin versus local install
; Is install for "AllUsers" or "JustMe"?
; Default to "JustMe" - set to "AllUsers" if admin or on Win9x
; This function is used for the very first "custom page" of the installer.
; This custom page does not show up visibly, but it executes prior to the
; first visible page and sets up $INSTDIR properly...
; Choose different default installation folder based on SV_ALLUSERS...
; "Program Files" for AllUsers, "My Documents" for JustMe...

Function .onInit
	StrCmp "@CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL@" "ON" 0 inst

	ReadRegStr $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@" "UninstallString"
	StrCmp $0 "" inst

	MessageBox MB_YESNOCANCEL|MB_ICONEXCLAMATION \
	"@CPACK_NSIS_PACKAGE_NAME@ is already installed. $\n$\nDo you want to uninstall the old version before installing the new one?" \
	IDYES uninst IDNO inst
	Abort

	;Run the uninstaller
	uninst:
		ClearErrors
		StrLen $2 "\Uninstall.exe"
		StrCpy $3 $0 -$2 # remove "\Uninstall.exe" from UninstallString to get path
		ExecWait '$0 _?=$3' ;Do not copy the uninstaller to a temp file

		IfErrors uninst_failed inst
	
	uninst_failed:
		MessageBox MB_OK|MB_ICONSTOP "Uninstall failed."
		Abort

	inst:
		; Select installer language
		!insertmacro MUI_LANGDLL_DISPLAY
	
		; Reads components status for registry
		!insertmacro SectionList "InitSection"

		; check to see if /D has been used to change
		; the install directory by comparing it to the
		; install directory that is expected to be the
		; default
		StrCpy $IS_DEFAULT_INSTALLDIR 0
		StrCmp "$INSTDIR" "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@" 0 +2
		StrCpy $IS_DEFAULT_INSTALLDIR 1

		StrCpy $SV_ALLUSERS "JustMe"
		; if default install dir then change the default
		; if it is installed for JustMe
		StrCmp "$IS_DEFAULT_INSTALLDIR" "1" 0 +2
		StrCpy $INSTDIR "$DOCUMENTS\@CPACK_PACKAGE_INSTALL_DIRECTORY@"

		ClearErrors
		UserInfo::GetName
		IfErrors noLM
		Pop $0
		UserInfo::GetAccountType
		Pop $1
		StrCmp $1 "Admin" 0 +4
		SetShellVarContext all
		;MessageBox MB_OK 'User "$0" is in the Admin group'
		StrCpy $SV_ALLUSERS "AllUsers"
		Goto done
		StrCmp $1 "Power" 0 +4
		SetShellVarContext all
		;MessageBox MB_OK 'User "$0" is in the Power Users group'
		StrCpy $SV_ALLUSERS "AllUsers"
		Goto done

	noLM:
		StrCpy $SV_ALLUSERS "AllUsers"
		;Get installation folder from registry if available

	done:
		StrCmp $SV_ALLUSERS "AllUsers" 0 +3
		StrCmp "$IS_DEFAULT_INSTALLDIR" "1" 0 +2
		StrCpy $INSTDIR "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@"

		StrCmp "@CPACK_NSIS_MODIFY_PATH@" "ON" 0 noOptionsPage
		!insertmacro MUI_INSTALLOPTIONS_EXTRACT "NSIS.InstallOptions.ini"

	noOptionsPage:
FunctionEnd
